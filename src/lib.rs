#![warn(clippy::pedantic, elided_lifetimes_in_paths, explicit_outlives_requirements)]
#![allow(
	confusable_idents,
	mixed_script_confusables,
	non_camel_case_types,
	non_snake_case,
	uncommon_codepoints
)]

pub mod sdl_main;

use {
	glium::{
		texture::{MipmapsOption, RawImage2d},
		uniforms::{MagnifySamplerFilter, MinifySamplerFilter, SamplerBehavior, SamplerWrapFunction},
		DrawParameters, Surface, Texture2d,
	},
	glium_sdl2::SDL2Facade,
	std::path::Path,
};

pub fn default<T: Default>() -> T {
	Default::default()
}

pub trait Application {
	fn update(&mut self, deltaSeconds: f32);
	fn render(&self, frame: &mut impl Surface, drawParameters: &DrawParameters<'_>, aspectRatio: f32);
}

pub const VERTEX_SHADER: &str = r#"
	#version 110

	uniform mat4 u_model;
	uniform mat4 u_view;
	uniform mat4 u_projection;

	attribute vec3 a_position;
	attribute vec3 a_normal;
	attribute vec2 a_texCoord;

	varying vec3 v_position;
	varying vec3 v_normal;
	varying vec2 v_texCoord;

	void main(void) {
		vec4 position = u_model * vec4(a_position, 1.0);
		gl_Position = (u_projection * u_view) * position;
		v_position = vec3(position);
		v_normal = vec3(u_model * vec4(a_normal, 0.0));
		v_texCoord = a_texCoord;
	}
"#;

pub const FRAGMENT_SHADER: &str = r#"
	#version 110
	// precision mediump float;

	varying vec3 v_position;
	varying vec3 v_normal;
	varying vec2 v_texCoord;

	uniform vec3 u_light;
	uniform sampler2D u_texture;

	void main(void) {
		gl_FragColor =
			texture2D(u_texture, v_texCoord) *
			max(0.0, dot(normalize(v_normal), normalize(u_light)));
	}
"#;

pub trait Texture2d_Ext {
	fn fromImageFilePath(display: &SDL2Facade, imageFilePath: impl AsRef<Path>) -> Self;
}
impl Texture2d_Ext for Texture2d {
	fn fromImageFilePath(display: &SDL2Facade, imageFilePath: impl AsRef<Path>) -> Self {
		let image = image::io::Reader::open(imageFilePath).unwrap().decode().unwrap().into_rgba8();
		let imageDimension = {
			let imageDimensions = image.dimensions();
			assert_eq!(imageDimensions.0, imageDimensions.1);
			imageDimensions.0
		};
		let image = RawImage2d::from_raw_rgba(image.into_raw(), (imageDimension, imageDimension));
		let sеlf = Self::with_mipmaps(display, image, MipmapsOption::AutoGeneratedMipmaps).unwrap();
		assert_eq!(sеlf.get_mipmap_levels(), imageDimension.ilog2() + 1);
		sеlf
	}
}

pub const SAMPLER_BEHAVIOR: SamplerBehavior = SamplerBehavior {
	wrap_function: (SamplerWrapFunction::Repeat, SamplerWrapFunction::Repeat, SamplerWrapFunction::Mirror),
	minify_filter: MinifySamplerFilter::NearestMipmapLinear,
	magnify_filter: MagnifySamplerFilter::Linear,
	depth_texture_comparison: None,
	max_anisotropy: 1,
};
